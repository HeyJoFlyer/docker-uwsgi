server {
    listen       443 quic reuseport default_server;
    listen       443 ssl;
    http2 on;
    server_name  domain.com;
    ssl_protocols TLSv1.2 TLSv1.3; # TLSv1.3 necessary for http3
    quic_retry on;
    ssl_early_data on;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
    ssl_ecdh_curve X25519:prime256v1:secp384r1;
    ssl_session_cache shared:SSL:5m;
    ssl_session_timeout 1h;
    ssl_session_tickets off;
    ssl_stapling_verify on;
    ssl_dhparam             /etc/nginx/certs/dhparam4096.pem; # generate with 'openssl dhparam -out dhparam4096.pem 4096'
    ssl_certificate         /etc/nginx/certs/tls.crt; #You can change these files to your certificates
    ssl_certificate_key     /etc/nginx/certs/tls.key;
    proxy_request_buffering off;
    add_header alt-svc 'h3=":443", ma=86400'; # Absolutely necessary header. This informs the client that HTTP/3 is available.
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always; # Optional but good, client should always try to use HTTPS, even for initial requests.

    location / {
    include uwsgi_params;
    uwsgi_pass unix:///tmp/uwsgi.sock;
    }
}